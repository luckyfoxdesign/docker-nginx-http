# Пользователь, от имени которого работает nginx - повышает безопасность благодаря принципу минимальных привилегий
user nginx;

# Автоматически определяет оптимальное число рабочих процессов (обычно равно числу ядер CPU) - оптимизирует использование ресурсов
worker_processes auto;

# Увеличивает лимит открытых файлов для worker-процессов - предотвращает ошибки "too many open files"
worker_rlimit_nofile 65535;

# Путь к файлу, хранящему ID главного процесса - нужен для контроля nginx другими процессами
pid /var/run/nginx.pid;

# Загружает WAF-модуль ModSecurity - обеспечивает защиту от атак на уровне приложения
load_module modules/ngx_http_modsecurity_module.so;

events {
    # Максимальное число соединений на worker - определяет максимальную нагрузку
    worker_connections 4096;

    # Разрешает обработку множественных соединений за один раз - ускоряет обработку при высоких нагрузках
    multi_accept on;
}

http {
    # Подключает список MIME-типов - правильное определение Content-Type ответов
    include /etc/nginx/mime.types;

    # Тип по умолчанию - задаёт тип для неизвестных расширений
    default_type application/octet-stream;

    # Кодировка по умолчанию - обеспечивает правильное отображение символов
    charset utf-8;

    # Скрывает версию nginx из заголовков - усложняет целенаправленные атаки
    server_tokens off;

    # Использует системный вызов sendfile для передачи файлов - ускоряет передачу статики
    sendfile on;

    # Оптимизирует передачу полных TCP-пакетов - экономит трафик и ускоряет передачу
    tcp_nopush on;

    # Отключает алгоритм Нагла - уменьшает задержки для небольших запросов
    tcp_nodelay on;

    # Время сохранения соединения - баланс между экономией ресурсов и скоростью
    keepalive_timeout 65;

    # Таймаут ожидания тела запроса - защита от медленных атак
    client_body_timeout 10;

    # Таймаут ожидания заголовков - защита от медленных атак
    client_header_timeout 10;

    # Таймаут отправки ответа - защита от проблемных клиентов
    send_timeout 10;

    # Максимальный размер тела запроса - предотвращает DoS через большие запросы
    client_max_body_size 10m;

    # Размер буфера для тела запроса - оптимизирует память
    client_body_buffer_size 128k;

    # Ограничение запросов по IP - защита от флуда
    limit_req_zone $binary_remote_addr zone=ip:10m rate=10r/s;

    # Ограничение соединений по IP - защита от DoS
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Ограничение для авторизации - защита от брутфорса
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # Формат лога с важными полями - помогает в анализе трафика и расследовании инцидентов
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent" "$http_x_forwarded_for"';

    # Путь и буфер для логов доступа - оптимизирует дисковые операции
    access_log /var/log/nginx/access.log main buffer=16k;

    # Путь и уровень логов ошибок - необходим для отладки
    error_log /var/log/nginx/error.log warn;

    # Создаёт переменную на основе IP клиента - используется для ограничения доступа
    geo $allowed_admin {
        # По умолчанию доступ запрещён - принцип "запрещено всё, что не разрешено"
        default 0;

        # Разрешение для внутренней сети - безопасный доступ для админов
        10.0.0.0/8 1;

        # Разрешение для локальной сети - безопасный доступ для админов
        192.168.0.0/16 1;

        # Конкретный IP - доступ для критически важных систем
        11.22.33.44 1;
    }

    # Сопоставление заголовка авторизации с переменной - реализует токен-авторизацию
    map $http_authorization $auth_ok {
        # По умолчанию доступ запрещён - безопасное поведение по умолчанию
        default 0;

        # Проверка на соответствие токену - разрешает доступ при валидном токене
        "${AUTH_TOKEN}" 1;
    }

    server {

        # Обрабатывает все запросы по умолчанию - перехватывает запросы по IP
        listen 80 default_server;

        # То же для IPv6 - полная поддержка обоих протоколов
        listen [::]:80 default_server;

        # Принимает любое имя сервера - перехватывает запросы к неизвестным доменам
        server_name _;

        include /etc/nginx/snippets/security-headers.conf;

        # Отключает логирование для частых запросов - снижает нагрузку
        location = /favicon.ico { access_log off; log_not_found off; }

        # Отключает логирование для частых запросов - снижает нагрузку
        location = /robots.txt { access_log off; log_not_found off; }

        # Блокирует доступ к скрытым файлам - скрывает конфигурационные файлы
        location ~ /\. { deny all; return 404; }

        location / {
            # Закрывает соединение без ответа - защита от сканирования по IP
            return 444;
        }

        # Эндпоинт для проверки работоспособности - используется мониторингом
        location = /healthz {
            # Отключает логирование - снижает нагрузку
            access_log off;

            # Простой ответ для проверки - подтверждает работоспособность
            return 200 "OK";
        }
    }

    server {
        # Слушает порт 80 - принимает HTTP-запросы
        listen 80;

        # Домены для этого блока - маршрутизация по доменному имени
        server_name ${DOMAINS};

        include /etc/nginx/snippets/security-headers.conf;

        # Ограничение запросов с буфером - защита от флуда с разрешением пиков
        limit_req zone=ip burst=20 nodelay;

        # Ограничение одновременных соединений - защита от исчерпания ресурсов
        limit_conn conn_limit 10;

        location /api/signal {
            # Проверка прав доступа - авторизация на основе IP или токена
            # Если IP не в белом списке - проверить токен
            # if ($allowed_admin = 0) {
            #     # Если токен недействителен - запретить
            #     if ($auth_ok = 0) {
            #         # Код ошибки "Запрещено" - информирует о недостатке прав
            #         return 403;
            #     }
            # }

            # Если токен недействителен - запретить
            if ($auth_ok = 0) {
                # Код ошибки "Запрещено" - информирует о недостатке прав
                return 403;
            }

            # Проверка на специальные символы - защита от инъекций
            if ($request_uri ~* "[;'<>]") {
                # Код ошибки "Запрещено" - блокирует подозрительные запросы
                return 403;
            }

            # Проксирование на внутренний сервис - связь с бэкендом
            proxy_pass http://fastapi_grpanal_researcher_c:8001;

            # Версия HTTP для проксирования - поддержка передовых функций
            proxy_http_version 1.1;

            # Передача заголовка Host - правильная маршрутизация
            proxy_set_header Host $host;

            # Передача IP клиента - логирование реального источника
            proxy_set_header X-Real-IP $remote_addr;

            # Передача цепочки прокси - полный маршрут запроса
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Передача протокола - учёт схемы доступа
            proxy_set_header X-Forwarded-Proto $scheme;

            # Ограничение HTTP-методов - запрет нестандартных методов
            limit_except GET POST PUT DELETE {
                # Блокировка всех остальных методов - защита от атак через нестандартные методы
                deny all;
            }

            # Таймаут соединения с бэкендом - предотвращение зависаний
            proxy_connect_timeout 60s;

            # Таймаут отправки на бэкенд - предотвращение зависаний
            proxy_send_timeout 60s;

            # Таймаут чтения от бэкенда - предотвращение зависаний
            proxy_read_timeout 60s;
        }

        # location /admin/ {
            # satisfy all;  # Требует выполнения всех условий - усиленная защита для админки
            # allow 11.22.33.44;  # Разрешённый IP - доступ только для админов
            # deny all;  # Запрет для всех остальных - строгий контроль доступа

            # limit_req zone=login burst=5 nodelay;  # Защита от брутфорса - ограничение попыток авторизации

            # Проксирование на админ-сервис (аналогично API)
        # }

        # location / {
            # Проксирование на фронтенд (аналогично API, но без проверок)
        # }
    }
}
